// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notes.proto

package notes

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffefd935cd6c4a4a, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Note struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffefd935cd6c4a4a, []int{1}
}

func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (m *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(m, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Note) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Note) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NoteList struct {
	Notes                []*Note  `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteList) Reset()         { *m = NoteList{} }
func (m *NoteList) String() string { return proto.CompactTextString(m) }
func (*NoteList) ProtoMessage()    {}
func (*NoteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffefd935cd6c4a4a, []int{2}
}

func (m *NoteList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteList.Unmarshal(m, b)
}
func (m *NoteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteList.Marshal(b, m, deterministic)
}
func (m *NoteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteList.Merge(m, src)
}
func (m *NoteList) XXX_Size() int {
	return xxx_messageInfo_NoteList.Size(m)
}
func (m *NoteList) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteList.DiscardUnknown(m)
}

var xxx_messageInfo_NoteList proto.InternalMessageInfo

func (m *NoteList) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

type NoteRequestId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteRequestId) Reset()         { *m = NoteRequestId{} }
func (m *NoteRequestId) String() string { return proto.CompactTextString(m) }
func (*NoteRequestId) ProtoMessage()    {}
func (*NoteRequestId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffefd935cd6c4a4a, []int{3}
}

func (m *NoteRequestId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteRequestId.Unmarshal(m, b)
}
func (m *NoteRequestId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteRequestId.Marshal(b, m, deterministic)
}
func (m *NoteRequestId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteRequestId.Merge(m, src)
}
func (m *NoteRequestId) XXX_Size() int {
	return xxx_messageInfo_NoteRequestId.Size(m)
}
func (m *NoteRequestId) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteRequestId.DiscardUnknown(m)
}

var xxx_messageInfo_NoteRequestId proto.InternalMessageInfo

func (m *NoteRequestId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Note)(nil), "Note")
	proto.RegisterType((*NoteList)(nil), "NoteList")
	proto.RegisterType((*NoteRequestId)(nil), "NoteRequestId")
}

func init() { proto.RegisterFile("notes.proto", fileDescriptor_ffefd935cd6c4a4a) }

var fileDescriptor_ffefd935cd6c4a4a = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcd, 0x4a, 0x03, 0x41,
	0x10, 0x84, 0x77, 0x76, 0xb3, 0x1b, 0xd3, 0x8b, 0x39, 0x34, 0x1e, 0x86, 0x88, 0x1a, 0xfa, 0x62,
	0x4e, 0x83, 0xc4, 0x57, 0xf0, 0x87, 0x80, 0x78, 0x88, 0xf8, 0x00, 0x9a, 0xed, 0xc3, 0x40, 0x9c,
	0x59, 0x77, 0x5a, 0xc1, 0xf7, 0xf1, 0x41, 0x65, 0x66, 0xcc, 0x21, 0xc9, 0xb1, 0xaa, 0x9a, 0xfa,
	0x9a, 0x82, 0xd6, 0x79, 0xe1, 0x60, 0xfa, 0xc1, 0x8b, 0xa7, 0x31, 0xd4, 0xf7, 0x1f, 0xbd, 0xfc,
	0xd0, 0x03, 0x8c, 0x9e, 0xbd, 0x30, 0x4e, 0xa1, 0xb4, 0x9d, 0x56, 0x73, 0xb5, 0x98, 0xac, 0x4b,
	0xdb, 0xe1, 0x19, 0xd4, 0x62, 0x65, 0xcb, 0xba, 0x4c, 0x56, 0x16, 0xa8, 0x61, 0xbc, 0xf1, 0x4e,
	0xd8, 0x89, 0xae, 0x92, 0xbf, 0x93, 0x74, 0x0d, 0x27, 0xb1, 0xe7, 0xc9, 0x06, 0xc1, 0x73, 0xa8,
	0x13, 0x4b, 0xab, 0x79, 0xb5, 0x68, 0x97, 0xb5, 0x89, 0xc9, 0x3a, 0x7b, 0x74, 0x05, 0xa7, 0x49,
	0xf2, 0xe7, 0x17, 0x07, 0x59, 0x75, 0x87, 0xe4, 0xe5, 0xaf, 0x82, 0x36, 0x5e, 0xbc, 0xf0, 0xf0,
	0x6d, 0x37, 0x8c, 0x17, 0x30, 0x4a, 0xad, 0x8d, 0x49, 0x1f, 0xcf, 0x26, 0x66, 0x07, 0xa2, 0xe2,
	0x46, 0xe1, 0x25, 0x54, 0x8f, 0x2c, 0x38, 0x35, 0x7b, 0xad, 0xb3, 0x0c, 0xa5, 0x02, 0x35, 0x34,
	0x2b, 0x17, 0x78, 0x10, 0xcc, 0xd6, 0x5e, 0xf2, 0xda, 0x77, 0x6f, 0xc2, 0x47, 0x09, 0x41, 0x73,
	0xc7, 0x5b, 0x8e, 0xb3, 0x1c, 0xd4, 0xfe, 0x3f, 0x41, 0xc5, 0x7b, 0x93, 0x86, 0xbc, 0xfd, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0x8e, 0x17, 0x58, 0x57, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoteServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NoteService_ListClient, error)
	Get(ctx context.Context, in *NoteRequestId, opts ...grpc.CallOption) (*Note, error)
	Insert(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	Update(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	Delete(ctx context.Context, in *NoteRequestId, opts ...grpc.CallOption) (*Empty, error)
}

type noteServiceClient struct {
	cc *grpc.ClientConn
}

func NewNoteServiceClient(cc *grpc.ClientConn) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NoteService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NoteService_serviceDesc.Streams[0], "/NoteService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &noteServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NoteService_ListClient interface {
	Recv() (*NoteList, error)
	grpc.ClientStream
}

type noteServiceListClient struct {
	grpc.ClientStream
}

func (x *noteServiceListClient) Recv() (*NoteList, error) {
	m := new(NoteList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noteServiceClient) Get(ctx context.Context, in *NoteRequestId, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/NoteService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Insert(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/NoteService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Update(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/NoteService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Delete(ctx context.Context, in *NoteRequestId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/NoteService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServiceServer is the server API for NoteService service.
type NoteServiceServer interface {
	List(*Empty, NoteService_ListServer) error
	Get(context.Context, *NoteRequestId) (*Note, error)
	Insert(context.Context, *Note) (*Note, error)
	Update(context.Context, *Note) (*Note, error)
	Delete(context.Context, *NoteRequestId) (*Empty, error)
}

func RegisterNoteServiceServer(s *grpc.Server, srv NoteServiceServer) {
	s.RegisterService(&_NoteService_serviceDesc, srv)
}

func _NoteService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoteServiceServer).List(m, &noteServiceListServer{stream})
}

type NoteService_ListServer interface {
	Send(*NoteList) error
	grpc.ServerStream
}

type noteServiceListServer struct {
	grpc.ServerStream
}

func (x *noteServiceListServer) Send(m *NoteList) error {
	return x.ServerStream.SendMsg(m)
}

func _NoteService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoteService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Get(ctx, req.(*NoteRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoteService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Insert(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoteService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Update(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NoteService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Delete(ctx, req.(*NoteRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NoteService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _NoteService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NoteService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NoteService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _NoteService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notes.proto",
}
